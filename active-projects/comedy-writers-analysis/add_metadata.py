import json
import pandas as pd

def add_metadata_to_csv():
    # Input and output file paths
    input_file = 'michelin_enriched_updated.csv'
    output_file = 'michelin_enriched_final_with_metadata.csv'
    start_show = "Abbott Elementary" # The show name to find the starting row

    # Parse the JSON objects from the string where they're on a single line
    # NOTE: Ensure the order of these JSON objects matches the order of shows
    # in your CSV file, starting from the 'start_show'.
    json_str = """{"show_title":"Abbott Elementary","primary_genre":"Comedy","sub_genre":["Workplace"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Witty","Slice-of-Life","Hopeful","Feel-Good"]} {"show_title":"Arrested Development","primary_genre":"Comedy","sub_genre":["Satire"],"format":"½-hr Single-Cam","tone_tags":["Absurdist","Satirical","Quirky","Fast-Paced","Irreverent"]} {"show_title":"Atlanta","primary_genre":"Dramedy","sub_genre":["Slice-of-Life","Surreal"],"format":"½-hr Single-Cam","tone_tags":["Experimental","Slice-of-Life","Surreal","Melancholic","Satirical"]} {"show_title":"Barry","primary_genre":"Dramedy","sub_genre":["Crime","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Dark","Bittersweet","Satirical","Edgy","Cerebral"]} {"show_title":"Bluey","primary_genre":"Kids","sub_genre":["Slice-of-Life"],"format":"Animated Series","tone_tags":["Heartfelt","Hopeful","Whimsical","Slice-of-Life","Feel-Good"]} {"show_title":"BoJack Horseman","primary_genre":"Adult Animation","sub_genre":["Dark Comedy"],"format":"Animated Series","tone_tags":["Dark","Melancholic","Satirical","Absurdist","Bittersweet"]} {"show_title":"Call My Agent!","primary_genre":"Dramedy","sub_genre":["Workplace"],"format":"1-hr Drama","tone_tags":["Witty","Satirical","Slice-of-Life","Feel-Good","Quirky"]} {"show_title":"Derry Girls","primary_genre":"Comedy","sub_genre":["Coming-of-Age"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Irreverent","Slice-of-Life","Witty","Fast-Paced"]} {"show_title":"Fleabag","primary_genre":"Dramedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Dark","Bittersweet","Witty","Melancholic","Irreverent"]} {"show_title":"Hacks","primary_genre":"Comedy","sub_genre":["Workplace"],"format":"½-hr Single-Cam","tone_tags":["Witty","Heartfelt","Sarcastic","Bittersweet","Slice-of-Life"]} {"show_title":"Only Murders in the Building","primary_genre":"Comedy","sub_genre":["Mystery"],"format":"½-hr Single-Cam","tone_tags":["High-Concept","Witty","Whimsical","Quirky","Slice-of-Life"]} {"show_title":"Reservation Dogs","primary_genre":"Dramedy","sub_genre":["Coming-of-Age","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Bittersweet","Slice-of-Life","Hopeful","Melancholic","Quirky"]} {"show_title":"Rick and Morty","primary_genre":"Adult Animation","sub_genre":["Satire"],"format":"Animated Series","tone_tags":["Absurdist","High-Concept","Satirical","Dark","Fast-Paced"]} {"show_title":"Schitt’s Creek","primary_genre":"Comedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Feel-Good","Slice-of-Life","Quirky","Hopeful"]} {"show_title":"Sex Education","primary_genre":"Dramedy","sub_genre":["Coming-of-Age","Romance"],"format":"1-hr Drama","tone_tags":["Heartfelt","Raunchy","Witty","Bittersweet","Hopeful"]} {"show_title":"Silicon Valley","primary_genre":"Comedy","sub_genre":["Workplace","Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Witty","High-Concept","Fast-Paced","Sarcastic"]} {"show_title":"South Park","primary_genre":"Adult Animation","sub_genre":["Satire"],"format":"Animated Series","tone_tags":["Satirical","Absurdist","Raunchy","Irreverent","Fast-Paced"]} {"show_title":"Ted Lasso","primary_genre":"Dramedy","sub_genre":["Sports"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Hopeful","Feel-Good","Witty","Slice-of-Life"]} {"show_title":"The Bear","primary_genre":"Dramedy","sub_genre":["Workplace","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Dark","Fast-Paced","Bittersweet","Slice-of-Life","Hopeful"]} {"show_title":"The Good Place","primary_genre":"Comedy","sub_genre":["Satire"],"format":"½-hr Single-Cam","tone_tags":["High-Concept","Whimsical","Cerebral","Hopeful","Satirical"]} {"show_title":"The Marvelous Mrs. Maisel","primary_genre":"Dramedy","sub_genre":["Slice-of-Life"],"format":"1-hr Drama","tone_tags":["Witty","Fast-Paced","Feel-Good","Slice-of-Life","Hopeful"]} {"show_title":"Veep","primary_genre":"Comedy","sub_genre":["Political","Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Fast-Paced","Irreverent","Cerebral","Witty"]} {"show_title":"What We Do in the Shadows","primary_genre":"Comedy","sub_genre":["Mockumentary"],"format":"½-hr Single-Cam","tone_tags":["Absurdist","Satirical","Whimsical","Irreverent","Quirky"]} {"show_title":"After Life","primary_genre":"Dramedy","sub_genre":["Slice-of-Life","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Dark","Bittersweet","Melancholic","Heartfelt","Dry"]} {"show_title":"Beef","primary_genre":"Dramedy","sub_genre":["Dark Comedy","Crime"],"format":"½-hr Single-Cam","tone_tags":["Dark","Edgy","Bittersweet","Fast-Paced","Melancholic"]} {"show_title":"Big Mouth","primary_genre":"Adult Animation","sub_genre":["Coming-of-Age"],"format":"Animated Series","tone_tags":["Raunchy","Absurdist","Heartfelt","Whimsical","Edgy"]} {"show_title":"Bob's Burgers","primary_genre":"Adult Animation","sub_genre":["Slice-of-Life"],"format":"Animated Series","tone_tags":["Heartfelt","Witty","Quirky","Feel-Good","Slice-of-Life"]} {"show_title":"Brassic","primary_genre":"Dramedy","sub_genre":["Crime"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Edgy","Fast-Paced","Irreverent","Heartfelt"]} {"show_title":"Brooklyn Nine-Nine","primary_genre":"Comedy","sub_genre":["Workplace","Procedural"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Witty","Fast-Paced","Feel-Good","Broad"]} {"show_title":"Catastrophe","primary_genre":"Dramedy","sub_genre":["Romance"],"format":"½-hr Single-Cam","tone_tags":["Bittersweet","Raunchy","Heartfelt","Witty","Slice-of-Life"]} {"show_title":"Colin from Accounts","primary_genre":"Dramedy","sub_genre":["Romance"],"format":"½-hr Single-Cam","tone_tags":["Quirky","Heartfelt","Bittersweet","Hopeful","Witty"]} {"show_title":"Community","primary_genre":"Comedy","sub_genre":["Satire","Meta"],"format":"½-hr Single-Cam","tone_tags":["Absurdist","Satirical","Witty","Quirky","Experimental"]} {"show_title":"Detectorists","primary_genre":"Comedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Slow-Burn","Whimsical","Heartfelt","Slice-of-Life","Quirky"]} {"show_title":"Eastbound & Down","primary_genre":"Comedy","sub_genre":["Sports","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Dark","Absurdist","Satirical","Irreverent"]} {"show_title":"Ghosts (UK)","primary_genre":"Comedy","sub_genre":["Supernatural"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","Quirky","Heartfelt","Hopeful","Slice-of-Life"]} {"show_title":"Girls","primary_genre":"Dramedy","sub_genre":["Coming-of-Age"],"format":"½-hr Single-Cam","tone_tags":["Bittersweet","Witty","Raunchy","Slice-of-Life","Melancholic"]} {"show_title":"Good Omens","primary_genre":"Fantasy","sub_genre":["Satire"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","Satirical","High-Concept","Hopeful","Quirky"]} {"show_title":"I Think You Should Leave","primary_genre":"Sketch/Variety","sub_genre":["Dark Comedy"],"format":"Sketch","tone_tags":["Absurdist","Satirical","Dark","Edgy","Niche"]} {"show_title":"Insecure","primary_genre":"Dramedy","sub_genre":["Coming-of-Age","Romance"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Bittersweet","Witty","Hopeful","Slice-of-Life"]} {"show_title":"Inside No. 9","primary_genre":"Anthology","sub_genre":["Dark Comedy"],"format":"Anthology","tone_tags":["Dark","Surreal","Satirical","High-Concept","Bittersweet"]} {"show_title":"Kim’s Convenience","primary_genre":"Comedy","sub_genre":["Workplace","Family"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Slice-of-Life","Witty","Quirky","Hopeful"]} {"show_title":"Master of None","primary_genre":"Dramedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Bittersweet","Cerebral","Slice-of-Life","Hopeful"]} {"show_title":"Minx","primary_genre":"Dramedy","sub_genre":["Period","Romance"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Witty","Hopeful","Quirky","Heartfelt"]} {"show_title":"Mo","primary_genre":"Dramedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Bittersweet","Slice-of-Life","Hopeful","Quirky"]} {"show_title":"Mythic Quest","primary_genre":"Comedy","sub_genre":["Workplace","Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Witty","Absurdist","Fast-Paced","Quirky"]} {"show_title":"Nathan For You","primary_genre":"Comedy","sub_genre":["Mockumentary"],"format":"½-hr Single-Cam","tone_tags":["Deadpan","Absurdist","Satirical","Cringe","Experimental"]} {"show_title":"Our Flag Means Death","primary_genre":"Comedy","sub_genre":["Romance"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","Heartfelt","Queer","Hopeful","Quirky"]} {"show_title":"Party Down (2023)","primary_genre":"Comedy","sub_genre":["Workplace"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Deadpan","Witty","Quirky","Bittersweet"]} {"show_title":"Peep Show (UK)","primary_genre":"Comedy","sub_genre":["Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Dark","Awkward","Absurdist","Satirical","Witty"]} {"show_title":"Please Like Me","primary_genre":"Dramedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Bittersweet","Quirky","Slice-of-Life","Hopeful"]} {"show_title":"Russian Doll","primary_genre":"Dramedy","sub_genre":["High-Concept","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Surreal","Dark","High-Concept","Bittersweet","Experimental"]} {"show_title":"Stath Lets Flats","primary_genre":"Comedy","sub_genre":["Workplace"],"format":"½-hr Single-Cam","tone_tags":["Awkward","Quirky","Absurdist","Deadpan","Slice-of-Life"]} {"show_title":"The Great","primary_genre":"Dramedy","sub_genre":["Historical","Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Raunchy","Quirky","High-Concept","Dark"]} {"show_title":"The Other Two","primary_genre":"Comedy","sub_genre":["Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Witty","Raunchy","Quirky","Fast-Paced"]} {"show_title":"The Rehearsal","primary_genre":"Comedy","sub_genre":["Experimental"],"format":"½-hr Single-Cam","tone_tags":["Experimental","Surreal","Cringe","Dark","Satirical"]} {"show_title":"The Righteous Gemstones","primary_genre":"Comedy","sub_genre":["Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Dark","Raunchy","Absurdist","Irreverent"]} {"show_title":"The Thick of It (UK)","primary_genre":"Comedy","sub_genre":["Political","Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Fast-Paced","Dark","Irreverent","Witty"]} {"show_title":"Utopia (AU)","primary_genre":"Comedy","sub_genre":["Workplace","Satire"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Deadpan","Dry","Slice-of-Life","Slow-Burn"]} {"show_title":"A.P. Bio","primary_genre":"Comedy","sub_genre":["Workplace","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Irreverent","Witty","Snarky","Broad","Fast-Paced"]} {"show_title":"American Vandal","primary_genre":"Comedy","sub_genre":["Mockumentary","Crime"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Deadpan","Cringe","Dark","High-Concept"]} {"show_title":"Avenue 5","primary_genre":"Comedy","sub_genre":["Sci-Fi","Satire"],"format":"½-hr Single-Cam","tone_tags":["Absurdist","Satirical","Quirky","Dark","Cerebral"]} {"show_title":"Broad City","primary_genre":"Comedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Witty","Irreverent","Fast-Paced","Hopeful"]} {"show_title":"Cobra Kai","primary_genre":"Dramedy","sub_genre":["Sports","Coming-of-Age"],"format":"½-hr Single-Cam","tone_tags":["Nostalgic","Heartfelt","Edgy","Fast-Paced","Hopeful"]} {"show_title":"Crazy Ex-Girlfriend","primary_genre":"Dramedy","sub_genre":["Musical","Romance"],"format":"½-hr Single-Cam","tone_tags":["Musical","Whimsical","Bittersweet","Raunchy","Hopeful"]} {"show_title":"Dickinson","primary_genre":"Dramedy","sub_genre":["Historical","Coming-of-Age"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","Witty","Anachronistic","Bittersweet","Hopeful"]} {"show_title":"Difficult People","primary_genre":"Comedy","sub_genre":["Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Snarky","Irreverent","Cynical","Fast-Paced","Witty"]} {"show_title":"Feel Good","primary_genre":"Dramedy","sub_genre":["Romance"],"format":"½-hr Single-Cam","tone_tags":["Bittersweet","Heartfelt","Raunchy","Hopeful","Quirky"]} {"show_title":"Friday Night Dinner","primary_genre":"Comedy","sub_genre":["Family","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Awkward","Farce","Witty","Heartfelt","Quirky"]} {"show_title":"GLOW","primary_genre":"Dramedy","sub_genre":["Sports","Period"],"format":"½-hr Single-Cam","tone_tags":["Empowering","Heartfelt","Witty","Bittersweet","Hopeful"]} {"show_title":"Girls5eva","primary_genre":"Comedy","sub_genre":["Musical"],"format":"½-hr Single-Cam","tone_tags":["Witty","Empowering","Quirky","Hopeful","Fast-Paced"]} {"show_title":"How To with John Wilson","primary_genre":"Comedy","sub_genre":["Documentary","Essay"],"format":"½-hr Single-Cam","tone_tags":["Observational","Quirky","Heartfelt","Dry","Experimental"]} {"show_title":"Inside Amy Schumer","primary_genre":"Sketch/Variety","sub_genre":["Satire"],"format":"Sketch","tone_tags":["Raunchy","Satirical","Witty","Edgy","Irreverent"]} {"show_title":"Jury Duty","primary_genre":"Comedy","sub_genre":["Mockumentary"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Cringe","Quirky","Feel-Good","Satirical"]} {"show_title":"Lady Dynamite","primary_genre":"Dramedy","sub_genre":["Surreal","Autobiographical"],"format":"½-hr Single-Cam","tone_tags":["Surreal","Absurdist","Heartfelt","Experimental","Bittersweet"]} {"show_title":"Lodge 49","primary_genre":"Dramedy","sub_genre":["Slice-of-Life","Mystery"],"format":"½-hr Single-Cam","tone_tags":["Languid","Whimsical","Hopeful","Quirky","Bittersweet"]} {"show_title":"Loudermilk","primary_genre":"Comedy","sub_genre":["Slice-of-Life","Recovery"],"format":"½-hr Single-Cam","tone_tags":["Snarky","Heartfelt","Dry","Bittersweet","Hopeful"]} {"show_title":"Miracle Workers","primary_genre":"Comedy","sub_genre":["Fantasy","Anthology"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","High-Concept","Absurdist","Hopeful","Quirky"]} {"show_title":"Motherland","primary_genre":"Comedy","sub_genre":["Family","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Relatable","Awkward","Witty","Quirky","Stressful"]} {"show_title":"New Girl","primary_genre":"Comedy","sub_genre":["Romance","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Quirky","Witty","Hopeful","Feel-Good"]} {"show_title":"PEN15","primary_genre":"Comedy","sub_genre":["Coming-of-Age"],"format":"½-hr Single-Cam","tone_tags":["Cringe","Bittersweet","Heartfelt","Nostalgic","Quirky"]} {"show_title":"Peacemaker","primary_genre":"Action/Adventure","sub_genre":["Superhero","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Irreverent","Edgy","High-Concept","Satirical"]} {"show_title":"People Just Do Nothing","primary_genre":"Comedy","sub_genre":["Mockumentary"],"format":"½-hr Single-Cam","tone_tags":["Deadpan","Cringe","Satirical","Awkward","Quirky"]} {"show_title":"Plebs","primary_genre":"Comedy","sub_genre":["Historical","Sitcom"],"format":"½-hr Single-Cam","tone_tags":["Farce","Raunchy","Quirky","Satirical","Irreverent"]} {"show_title":"Ramy","primary_genre":"Dramedy","sub_genre":["Slice-of-Life","Spiritual"],"format":"½-hr Single-Cam","tone_tags":["Introspective","Bittersweet","Heartfelt","Wry","Hopeful"]} {"show_title":"Rosehaven","primary_genre":"Comedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Gentle","Quirky","Heartfelt","Slow-Burn","Hopeful"]} {"show_title":"Search Party","primary_genre":"Dramedy","sub_genre":["Mystery","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Dark","Satirical","Bittersweet","Irreverent","High-Concept"]} {"show_title":"Superstore","primary_genre":"Comedy","sub_genre":["Workplace"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Witty","Relatable","Broad","Hopeful"]} {"show_title":"Taskmaster","primary_genre":"Variety","sub_genre":["Game Show","Comedy"],"format":"Variety","tone_tags":["Playful","Chaotic","Quirky","Feel-Good","Absurdist"]} {"show_title":"The Carmichael Show","primary_genre":"Comedy","sub_genre":["Family","Topical"],"format":"½-hr Multi-Cam","tone_tags":["Topical","Witty","Heartfelt","Broad","Cerebral"]} {"show_title":"The End of the F***ing World","primary_genre":"Dramedy","sub_genre":["Dark Comedy","Road Trip"],"format":"½-hr Single-Cam","tone_tags":["Dark","Bittersweet","Edgy","Wry","Cinematic"]} {"show_title":"The Last Man on Earth","primary_genre":"Comedy","sub_genre":["Post-Apocalyptic"],"format":"½-hr Single-Cam","tone_tags":["Absurdist","Lonely","Quirky","Dark","Hopeful"]} {"show_title":"The Letdown","primary_genre":"Comedy","sub_genre":["Family","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Relatable","Awkward","Heartfelt","Bittersweet","Quirky"]} {"show_title":"This Country","primary_genre":"Comedy","sub_genre":["Mockumentary","Rural"],"format":"½-hr Single-Cam","tone_tags":["Awkward","Deadpan","Quirky","Slice-of-Life","Gentle"]} {"show_title":"Toast of London / Tinseltown","primary_genre":"Comedy","sub_genre":["Showbiz","Absurd"],"format":"½-hr Single-Cam","tone_tags":["Absurdist","Quirky","Irreverent","Satirical","Broad"]} {"show_title":"Unbreakable Kimmy Schmidt","primary_genre":"Comedy","sub_genre":["Fish-Out-of-Water","Satire"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","Witty","Hopeful","Fast-Paced","Quirky"]} {"show_title":"Upload","primary_genre":"Comedy","sub_genre":["Sci-Fi","Romance"],"format":"½-hr Single-Cam","tone_tags":["High-Concept","Witty","Heartfelt","Satirical","Hopeful"]} {"show_title":"We Are Lady Parts","primary_genre":"Comedy","sub_genre":["Musical","Coming-of-Age"],"format":"½-hr Single-Cam","tone_tags":["Empowering","Quirky","Witty","Hopeful","Energetic"]} {"show_title":"Workaholics","primary_genre":"Comedy","sub_genre":["Workplace","Stoner"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Irreverent","Absurdist","Bro","Fast-Paced"]} {"show_title":"Workin’ Moms","primary_genre":"Comedy","sub_genre":["Family","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Relatable","Raunchy","Heartfelt","Witty","Stressful"]} {"show_title":"A League of Their Own (2022)","primary_genre":"Dramedy","sub_genre":["Sports","Period"],"format":"1-hr Drama","tone_tags":["Empowering","Heartfelt","Hopeful","Bittersweet","Witty"]} {"show_title":"Awkwafina Is Nora from Queens","primary_genre":"Comedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Quirky","Raunchy","Irreverent","Heartfelt","Witty"]} {"show_title":"Bupkis","primary_genre":"Dramedy","sub_genre":["Autobiographical","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Bittersweet","Irreverent","Wry","Heartfelt"]} {"show_title":"Corner Gas","primary_genre":"Comedy","sub_genre":["Slice-of-Life","Rural"],"format":"½-hr Single-Cam","tone_tags":["Gentle","Quirky","Witty","Feel-Good","Slow-Burn"]} {"show_title":"Dead to Me","primary_genre":"Dramedy","sub_genre":["Dark Comedy","Mystery"],"format":"½-hr Single-Cam","tone_tags":["Bittersweet","Dark","Witty","Edgy","Twisty"]} {"show_title":"Deadloch","primary_genre":"Dramedy","sub_genre":["Mystery","Dark Comedy"],"format":"½-hr Single-Cam","tone_tags":["Satirical","Dark","Feminist","Wry","Twisty"]} {"show_title":"Family Business","primary_genre":"Comedy","sub_genre":["Crime","Family"],"format":"½-hr Single-Cam","tone_tags":["Farce","Heartfelt","Quirky","Fast-Paced","Satirical"]} {"show_title":"Fisk","primary_genre":"Comedy","sub_genre":["Workplace","Legal"],"format":"½-hr Single-Cam","tone_tags":["Dry","Awkward","Quirky","Heartfelt","Slow-Burn"]} {"show_title":"Loot","primary_genre":"Comedy","sub_genre":["Workplace"],"format":"½-hr Single-Cam","tone_tags":["Witty","Quirky","Heartfelt","Hopeful","Broad"]} {"show_title":"Mythomaniac","primary_genre":"Dramedy","sub_genre":["Family"],"format":"½-hr Single-Cam","tone_tags":["Bittersweet","Dark","Satirical","Wry","Heartfelt"]} {"show_title":"Never Have I Ever","primary_genre":"Comedy","sub_genre":["Coming-of-Age","Romance"],"format":"½-hr Single-Cam","tone_tags":["Heartfelt","Witty","Hopeful","Nostalgic","Quirky"]} {"show_title":"No Activity","primary_genre":"Comedy","sub_genre":["Workplace","Crime"],"format":"½-hr Single-Cam","tone_tags":["Deadpan","Absurdist","Slow-Burn","Cringe","Irreverent"]} {"show_title":"OVNI(s)","primary_genre":"Comedy","sub_genre":["Sci-Fi","Mystery"],"format":"½-hr Single-Cam","tone_tags":["Whimsical","Quirky","High-Concept","Hopeful","Wry"]} {"show_title":"Paquita Salas","primary_genre":"Comedy","sub_genre":["Showbiz","Mockumentary"],"format":"½-hr Single-Cam","tone_tags":["Quirky","Heartfelt","Satirical","Witty","Hopeful"]} {"show_title":"Superwog","primary_genre":"Comedy","sub_genre":["Family","Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Raunchy","Irreverent","Quirky","Broad","Fast-Paced"]} {"show_title":"The Gentlemen","primary_genre":"Action/Adventure","sub_genre":["Crime","Dark Comedy"],"format":"1-hr Drama","tone_tags":["Stylish","Edgy","Witty","Fast-Paced","Satirical"]} {"show_title":"The Goes Wrong Show","primary_genre":"Comedy","sub_genre":["Farce","Theatre"],"format":"½-hr Single-Cam","tone_tags":["Slapstick","Chaotic","Quirky","Broad","Absurdist"]} {"show_title":"The Upshaws","primary_genre":"Comedy","sub_genre":["Family"],"format":"½-hr Multi-Cam","tone_tags":["Relatable","Heartfelt","Broad","Witty","Hopeful"]} {"show_title":"Welcome to Waikiki","primary_genre":"Comedy","sub_genre":["Slice-of-Life"],"format":"½-hr Single-Cam","tone_tags":["Farce","Heartfelt","Quirky","Hopeful","Feel-Good"]} {"show_title":"Wellington Paranormal","primary_genre":"Comedy","sub_genre":["Supernatural","Mockumentary"],"format":"½-hr Single-Cam","tone_tags":["Deadpan","Quirky","Absurdist","Whimsical","Satirical"]}"""

    # Split the string into individual JSON objects
    json_objects = json_str.split('} {')

    # Fix the JSON objects (add the closing/opening braces back)
    for i in range(len(json_objects)):
        if i == 0:
            json_objects[i] = json_objects[i] + '}'
        elif i == len(json_objects) - 1:
            json_objects[i] = '{' + json_objects[i]
        else:
            json_objects[i] = '{' + json_objects[i] + '}'

    # Parse each JSON object
    metadata_list = []
    for json_obj in json_objects:
        try:
            # Remove potential leading/trailing whitespace before parsing
            clean_json_obj = json_obj.strip()
            if clean_json_obj: # Ensure it's not an empty string
                metadata = json.loads(clean_json_obj)
                metadata_list.append(metadata)
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON: {e}")
            print(f"Problematic object (cleaned): '{clean_json_obj}'")
            # Optional: Stop processing or add placeholder if error occurs
            # metadata_list.append({}) # Add an empty dict as placeholder
            # raise # Or re-raise the exception to stop execution

    print(f"Parsed {len(metadata_list)} metadata entries")

    # Read the existing CSV file
    try:
        df = pd.read_csv(input_file)
        print(f"Read {len(df)} rows from {input_file}")

        # Find the row containing the start_show (case-insensitive)
        start_row = -1
        if 'Show' in df.columns:
            # Ensure 'Show' column is treated as string before using .str accessor
            df['Show'] = df['Show'].astype(str)
            matches = df[df['Show'].str.contains(start_show, case=False, na=False)]
            if not matches.empty:
                start_row = matches.index[0] # Get the index of the first match
        else:
             print(f"Error: 'Show' column not found in {input_file}")
             return # Exit if the crucial column is missing

        if start_row == -1:
            print(f"Warning: Could not find row containing '{start_show}'")
            # Decide if you want to proceed from row 0 or stop
            # print("Stopping execution because start show was not found.")
            # return
            print("Using the first row (index 0) as the starting point instead.")
            start_row = 0
        else:
            print(f"Found '{start_show}' at index {start_row}")

        # Add new columns for the metadata if they don't exist
        if 'Primary_Genre' not in df.columns: df['Primary_Genre'] = ""
        if 'Sub_Genre' not in df.columns: df['Sub_Genre'] = ""
        if 'Format' not in df.columns: df['Format'] = ""
        if 'Tone_Tags' not in df.columns: df['Tone_Tags'] = ""

        # Ensure columns are object/string type to prevent type errors
        df['Primary_Genre'] = df['Primary_Genre'].astype(object)
        df['Sub_Genre'] = df['Sub_Genre'].astype(object)
        df['Format'] = df['Format'].astype(object)
        df['Tone_Tags'] = df['Tone_Tags'].astype(object)


        # Fill in the metadata starting from the start_show row's index
        rows_updated_count = 0
        for i, metadata in enumerate(metadata_list):
            row_index = start_row + i
            if row_index < len(df):
                # Use .loc for label-based indexing which is generally preferred
                df.loc[row_index, 'Primary_Genre'] = metadata.get('primary_genre', '') # Use .get for safety
                df.loc[row_index, 'Sub_Genre'] = ', '.join(metadata.get('sub_genre', []))
                df.loc[row_index, 'Format'] = metadata.get('format', '')
                df.loc[row_index, 'Tone_Tags'] = ', '.join(metadata.get('tone_tags', []))
                rows_updated_count += 1
            else:
                print(f"Warning: Ran out of rows in CSV at index {row_index}. Metadata entry {i+1} ('{metadata.get('show_title', 'N/A')}') not added.")
                break # Stop if we go past the end of the DataFrame

        # Write the updated DataFrame to a new CSV
        df.to_csv(output_file, index=False)
        print(f"Successfully wrote updated data to {output_file}")
        if rows_updated_count > 0:
             print(f"Added metadata to {rows_updated_count} rows, from index {start_row} through {start_row + rows_updated_count - 1}")
        else:
             print("No metadata rows were added.")

    except FileNotFoundError:
         print(f"Error: Input file '{input_file}' not found.")
    except Exception as e:
        print(f"Error processing CSV: {e}")
        import traceback
        traceback.print_exc() # Print detailed traceback for debugging

if __name__ == "__main__":
    add_metadata_to_csv()